@using Store.Models
@model RegisterViewModel

<p class="title">Register</p>
@using (Ajax.BeginForm("Register", "Account", new AjaxOptions
{
    OnBegin = "onLoad('register-button')",
    OnFailure = "onLoadFail('register-button', 'Register')",
    OnSuccess = "formSuccess(data, 'register-button', 'Register')"
}, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary("", new { @class = "text-danger", id="general-error" })
<div class="input-group">
    <label for="email">Username</label>
    @Html.TextBoxFor(m => m.Username, new { id = "email", @class = "form-input" })
    @Html.ValidationMessageFor(m => m.Username, "", new { @class = "text-danger", id = "name-error" })

</div>
    <div class="input-group">
        <label for="email">Email</label>
        @Html.TextBoxFor(m => m.Email, new { id = "email", @class = "form-input" })
        @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger", id = "email-error" })
    </div>
    <div class="input-group">
        <label for="password">Password</label>
        @Html.PasswordFor(m => m.Password, new { id = "password", @class = "form-input" })
        @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger", id = "password-error" })

    </div>
    <div class="input-group">
        <label for="password">Confirm Password</label>
        @Html.PasswordFor(m => m.ConfirmPassword, new { id = "password", @class = "form-input" })
        @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger", id = "confirmpassword-error" })
    </div>
    <button class="sign mt-3" id="register-button">Register</button>
}
<p class="signup">
    Already have an account?
    @Html.ActionLink("Login", "Login")
</p>
